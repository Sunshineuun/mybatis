spring:
  application:
    name: spring-mybatis
  datasource:
    dynamic:
      primary: mysql
      strict: false
      datasource:
        mysql:
          url: jdbc:mysql://localhost:3306/qiusm
          username: ENC(xoJqlM1sWc5Xr8kDh8k/dA==)
          password: ENC(xoJqlM1sWc5Xr8kDh8k/dA==)
          driver-class-name: com.mysql.cj.jdbc.Driver
#        oracle:
#          url: jdbc:oracle:thin:@192.168.1.7:1521:orcl
#          username: qiusm
#          password: qiusm123
#          driver-class-name: oracle.jdbc.driver.OracleDriver
    druid:
      # 连接数据库的url，不同数据库不一样。例如：
      # mysql : jdbc:mysql://ip:port/database
      # oracle : jdbc:oracle:thin:@ip:port:database
      #      url: jdbc:mysql://172.29.28.235:3306/qsm?autoReconnect=true&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&useSSL=false
      # 数据源类型
      db-type: com.alibaba.druid.pool.DruidDataSource
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）
      initialSize: 2
      # 最大连接池数量（缺省值：8）
      maxActive: 20
      # 最小链接池数量
      minIdle: 1
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      maxWait: 60000
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(缺省值：false)
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-open-prepared-statements: -1
      # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      validationQuery: select 'x'
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      testOnBorrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnReturn: false
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 1) Destroy线程会检测连接的间隔时间。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 物理连接初始化的时候执行的sql
      connectionInitSqls: select 1 from dual
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
      # filters: stat,wall
      filter:
        # 监控统计
        stat:
          enabled: true
          # 数据库类型
          db-type: mysql
          # 慢sql
          log-slow-sql: true
          # 慢sql执行时间定义，超过这个时间则定义为慢sql
          slow-sql-millis: 200000
          merge-sql: true
        wall:
          enabled: true
          db-type: mysql
          config:
            delete-allow: false
            drop-table-allow: false
      # statViewServlet配置，说明配置参考druid wiki
      stat-view-servlet:
        # 黑名单
        deny:
        # 白名单
        allow:
        # 是否启用
        enabled: true
        # 访问监控页面
        url-pattern: "/druid/*"
        # 禁止手动重置监控数据
        reset-enable: false
        # 设置监控页面的登陆名
        login-username: admin
        # 设置监控页面的登陆密码
        login-password: admin
      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      web-stat-filter:
        enabled: true
        # 访问路径
        url-pattern: "/*"
        # 排除不必要的url
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
        # 监控最大session数，默认是1000
        session-stat-max-count: 1000
        # 是否启用session的统计功能
        session-stat-enable: true
        # 是否启用监控单个Url调用的sql列表
        profile-enable: true
        # 使druid当前session的用户是谁，session_user_key是你保存到session中的sessionName
        principalSessionName: session_user_key
        # 使druid只当当前的user是谁,cookie_user_key是你保存在cookie中的cookieName
        principalCookieName: cookie_user_key
logging:
  level:
    root: info
  config: classpath:logback-config.xml
  file:
    path: /tmp/logs
# mybatis plus config
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl
  global-config:
    db-config:
      logic-delete-value: 1
      logic-not-delete-value: 0
  mapper-locations: mapper/*.xml
# dubbo
dubbo:
  consumer:
    timeout: 600000
    check: true  # 关闭订阅服务是否启动的检查【检查时，没有服务提供者会报错】
  protocol:    # Dubbo 服务暴露的协议配置，其中子属性 name 为协议名称，port 为协议端口（ -1 表示自增端口，从 20880 开始）
    name: dubbo
    port: -1  #dubbo协议缺省端口为20880，rmi协议缺省端口为1099，http和hessian协议缺省端口为80；如果没有配置port，则自动采用默认端口，如果配置为-1，则会分配一个没有被占用的端口。Dubbo 2.4.0+，分配的端口在协议缺省端口的基础上增长，确保端口段可控
  registry:
    #其中前缀spring-cloud说明：挂载到 Spring Cloud注册中心
    address: nacos://192.168.1.7:8848
    # address: spring-cloud://localhost  #dubbo服务注册端口，注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port
    username: nacos
    password: nacos
  #    subscribe: true
  #    register: true
  cloud:
    subscribed-services: mongodb
server:
  port: 8004
# jasypt
jasypt:
  encryptor:
    password: luyun
